DNS 도메인 네임 시스템
www. naver.com
com도 회사의 도메인 그안에 naver라는 도메인이 있다. www는 네이버 도메인안에 있는 컴퓨터 이름이다.

서버가 브라우저에게 제공하는 모든 것들을 웹 컨텐츠라 한다.

서버에 요청을 보내 다이나믹 웹컨텐츠를 받아온다. 새로고침할때마다 매번 내용이 바뀐다.
스태틱 웹 컨텐츠는 새로고침해도 바뀌지 않는다. 요새는 스태텍 웹 컨텐츠는 존재하지 않는다라고 봐도 된다.

브라우저가 서버에게 보내는 요청은 무엇을 요청하는 걸까?
-> 웹 컨테츠 이다.

URL은 honstname과 pathname을 갖는다. pathname은 서버에 있는 웹 컨텐츠가 어떤 경로에 어떤 이름으로 존재하는지에 대한 정보를 갖고있다.

컨텐츠를 가공하지 않고 그대로 클라이언트에게 넘기는 컨텐츠를 static web contents라 부른다.

동적 요청을 일반 웹서버는 해결할 수없다. 일반 웹서버는 http를 구현한 대상에 불가하기 때문.
동적인 처리에 대한 방법을 가지고 있지않다.
그래서 back단에 동적인 처리를 할 수 있는 것을 만든다.
정적인 웹컨텐츠 요청인지 동적인 웹컨텐츠 요청인지 구별한 후, 정적일 떄는 webStorage에서 찾아서 넘긴다. 그러나 동적인 웹컨텐츠일때는 백단에 있는 누군가에 forward 시킨다. (최초 요청을 한 사용자 정보도 같이 넘긴다) 동적인 웹컨텐츠를 처리 하는 요놈을 WAS(Web Applcation Server) 라 부른다. 가장 대표적인 WAS는 tomcat, iis(internet information server) 등이 있다.

일반 Storage와 WAS가 갖는 Storage는 어떤 차이가 있을까?
Web Server 가 갖는 Storage는 정적 웹컨텐츠 정보를 갖고 있다.
WAS가 갖는 Storage는 동적 웹컨텐츠 정보를 갖고있다.
도대체 동적 웹 컨텐츠가 뭘까? php, jsp, asp 같은 것들 많이 들어봤죠? 이런 애들갖고 뭐 만들죠?
동적 웹 컨텐츠를 만드는 것이다. 대표적으로 html 웹페이지를 재구성한다.

jsp는 기본적으로 html인데 java 코드가 삽입되어있는 형태이다.





 

자바스크립트는 서버로부터 제공된 데이터를 클라이언트에서 동적으로 실행시키는 것이지
컨텐츠 자체가 동적인 것은 아니다.



현재 시간값을 보여주는 창 ( 동적 컨텐츠이다)
새로고침 할 때 마다 값이 바뀜
<%@ page language="java" contentType="text/html; charset=UTF-8"
   			import = "java.util.*"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h1> Hello, World... !</h1>
	<hr/>
	<h2> <%= new Date().toString() %></h2>
</body>
</html>


JSP vs Servlet
 

JSP는 자바 기능을 모두 다 사용할 수는 없지만, Servlet은 자바 기능을 모두 사용할 수 있다.(Java Class 기반이므로). 하지만 JSP도 거의 대부분 사용 할 수 있기 때문에 Servlet을 특별한 경우 아니면 사용하지 않는다.

JSP에서 bean은 컴포넌트인데 local bean과 enterprise bean이 존재한다.
local bean 은 하나의 컴퓨터에서 사용하는것이고 enterprise bean은 서버에 있는 것을 여러 사람이 갖다 쓰는 것이다.
실제적인 처리는 Java Bean에 위임하여 수행하고 JSP가 받아서 화면을 구성한다.

웹서버는 클라인트가 요청한게 정적인 요청인지 동적인 요청인지 어떻게 구분을 할 수 있을까?
pathName에 보면 root/myJSP/chap2/index.html 이면 html 문서면서 정적인 웹 컨텐츠이구나 하면서 안다. 그런데 root/myJSP/chap2/index.jsp면 동적인 요청이니 was에 넘겨야 겠구나 라고 처리한다. 즉, 확장자를 통해서 구분을 지을 수 있다.

JSP -> tansform -> .java파일 -> Compile -> .clas파일 -> 실행 -> _jspInit() -> _jspService() 개별적으로 실행.

동일한 .jsp 가 새로운 클라이언트의 요청일 경우 바로 _jspService()로 바로 가서 실행을 한다.
즉, 처음 실행될때는 많은 시간이 걸리지만 , 그다음부터는 실행이 빠르다. (일련의 과정을 생략하기 때문) 마지막으로 삭제되기 전에 _jspDestory()를 호출
<div> 는 태그 자체로 효과가 있는 것은 아니다.
<div> 는 명령을 구분하기 위한 목적으로 사용한다.


form - method (default = get)
request method - get, post
get방식은 URL 끝에 ? Parameter=Value
post방식은  get에 보이는 파라미터가 숨겨진다.


GET 방식은 Header만 존재하고 BODY는 존재하지 않는다.
POST 방식은 Header 와 Body 부분 둘다 존재한다.
그래서 Get 방식은 Body 영역이 없기 때문에 URL로 탑재 되어서 들어간다.

Form 태그가 반드시 가져야하는 속성
action 과 method
action 은 처리할 대상을 지정하는 속성
method 는 처리할 방식. 현재 웹페이지를 다시 요청 -> 동적 웹페이지로써 페이지가 변경된다.

input 태그
name 속성이 없는 입력양식태그는 사용될 수 없다.
name이라는 속성이 파라미터의 이름을 결정하기 때문에 get으로 바꿨을 때 나타나지 않을 뿐 아니라 요청을 탑재 하지 않는다.

number 일때 width 도 너비이고 size도 너비인데 size는 글자값의 너비이므로 width값이 먼저 적용된다.
text로 바꾸면 size가 적용된다.

input - type - (submit, reset, image, button) 이면 버튼을 만든다.
name 필요 없다.

<%@ %>
%@ page %를 directive (지시자)라가 부른다. 꼭 써야하는 지시자는 페이지 지시자다. 페이지 지시자가 없다면 jsp로 인식 하지 못한다.
현재 jsp에 대한 정보, 처리방식을 컨테이너(tomcat)에게 제공하기 위한 목적으로 사용된다.
서버가 클라이언트에 대해 응답하는데 contentType=”text/html” 이라는 뜻이다.
page 지시자는 서버가 브라우저에게 제공하는 정보다. 
<%@ %> 부분을  사용자가 직접 코딩하는 부분. script lit(?)
jsp 안에서 작업한 모든 변수는 _jspService() 안으로 들어간다.
result 변수는 _jspService()의 로컬 변수이다.

(request.getMethod().equals("POST")

request는 객체.
jsp는 필수객체들을 기본으로 제공해준다. servlet과 비교해서 장점이다.
request는 현재 클라이언트의 요청을 객체화 해놓은 것이다.
tomcat 서버는 브라우저로부터 요청이 들어오면 해당 jsp 문서나 servlet 문서에 넣어준다.
jsp는 컨테이너가 제공해주는 request 객체를 사용하기만 하면 된다.

request 는 getMothod를 제공한다. -> 현재 클라이언트방식이 어떤 방식으로 들어왔는지.

URL주소창에 새로운 URL를 입력하면 기본적으로 GET방식으로 서버에게 요청을 보낸다.

get Operation ->항상 문자열로 넘겨준다.

JSP에 자바코드 삽입하는 방법
- <%@ %> 사용 - 주석, 지시어, 선언과 표현식, 스크립트릿
- action 태그 사용 - 액션


주석
html 주석 : 소스보기를 하면 보인다.
jsp 주석 : 서버단에서 사용되는 주석이기 때문에 소스보기하면 보이지 않는다. (새로운 html코드가 원래의 자바코드를 덮어쓰기 때문에 전체 jsp문서는 완전한 html문서가 돼서 응답을 한다)
자바스크립트 주석 : 소스보기 하면 보인다.

서버단에서 자바코드만 수정한다. 나머지는 수정하지 않는다.

지시자
- 지시자(Directives)는 JSP 파일의 속성을 기술하는 JSP 문법
- JSP 컨테이너에게 해당 페이지를 어떻게 처리해야 하는지 전달하기 위한 내용을 담고 있다.
- 지시어는 크게 page, include ,taglib으로 나눌 수 있으며, 각각에서 다루는 속성이 다르다.

1. page 지시어
page 지시자는 현재 jsp 페이지를 컨테이너에서 처리하는 데 필요한 각종 속성을 기술하는 부분.

contentyType에서 charset=UTF-8 이면 pageEncoding도 이클립스 자체적으로 UTF-8로 된다. 쓸일이 거의 없다.
contentType의 charset : Http Client(웹브라우저)가 받아볼 페이지의 인코딩 방식
(Http 헤더에 기록되어 있음)
pageEncoding : JSP파일(페이지)에 기록된 소스코드 자체의 인코딩 방식

import 지시자 : 

session : 

buffer : buffer도 내장객체가 있다 .out


errorPage -> 에러 받아주는 역할.
isErrorPage 속성이 true로 되어있어야지만, error.jsp안에서 exception의 내장객체를 사용 할 수 있고 그래야지만 a.jsp에서 발생한 에러가 넘어 올 수 있다.
